schema {
    query: EventQuery
    mutation: EventMutation
}

type EventQuery {
    eventById(id: String!): Event
    eventDetail(id: String!): EventDetail
    eventTypeSummariesByTimePeriod(input: EventTypeSummaryTimePeriod, pageRequest: PageInfo): EventTypeSummaryResults
    eventsByTimePeriodAndType(type: EventType!, timePeriod: TimePeriod!, pageRequest: PageInfo):[Event]
}

type TypeQuery {
    getEventTypes: [EventType]
}

type EventMutation {
    updateType(id: String, type: String): Event
    closeSdaEvent(id: String, endDate: DateTime): Event
    deleteSdaEvent(id: String): Event
    updateEventStatus(id: String, eventStatus: EventStatus!): Event
    addSatelliteToEvent(eventId: String, satelliteUuid: String): EventSatellite
    releaseSatelliteFromEvent(eventId:String, satelliteUuid: String): Event
    promoteEventSatellite(eventId: String, satelliteUuid: String): EventSatellite
    addEventProcessingConfiguration(eventId: String): String
    createEvent(eventData: CreateEvent): Event
}

type EventTypeSummaryResults {
    id: String
    type: String
    planned: Int
    active: Int
    typename: String
}

type EventDetail {
    id: String
    state: String
    classification: String
    type: String
    name: String
    startDt: DateTime
    endDt: DateTime
    catalogObjectCount: Int
    analystObjects: Int
    candidateObjectCount: Int
    promotableObjectCount: Int
    parentEvent: Event
    launch: Launch
    observationSatMedleyArray: [ObservationSatMedley]
}

type Launch {
    id: String
    launchTimestamp: DateTime
    launchSite: String
    launchCountry: String
    typeName: String
}

type ObservationSatMedley {
    id: String
    satelliteId: String
    observationId: String
    classification: String
    isPromotable: Int
    isCataloged: Int
    isAnalyst: Int
    isCandidate: Int
    satno: Int
    ucn: Int
    commonName: String
    group: String
    type: String
    radarCrossSection: Float
    epoch: DateTime
    result: String
    period: Float
    inclination: Float
    apogee: Int
    perigee: Int
    eccentricity: Float
    typeName: String
}

type EventSatellite {
    eventSatUuid: String
    satelliteUuid: String
    ssaEvent: Event
    relationship: Int
    ucn: Int
}

type Event {
    ssaEventUuid: ID!
    classificationMarking: String
    ssaPredecessorEventUuid: ID
    eventType: Long
    eventName: String
    eventStatus: Long
    startDt: DateTime
    endDt: DateTime
    eventDesc: String
    internalNotes: String
    eventPostingId: String
    createDate: DateTime
    createOrigin: String
    updateDate: DateTime
    updateOrigin: String
    version: Long
}

input EventTypeSummaryTimePeriod {
    timePeriod: TimePeriod
}

input EventData {
    eventDataUuid: String
    classificationMarking: String
    eventUuid: String
    name: String
    uri: String
    type: String
    supplementalData: String
    createDate: DateTime
    createOrgin: String
    updateDate: DateTime
    updateOrgin: String
    version: Long
}

input CreateEvent {
    eventUuid: ID!
    classificationMarking: String!
    ssaPredecessorEventUuid: ID
    eventType: EventType!
    eventName: String!
    eventStatus: EventStatus!
    startDt: DateTime
    endDt: DateTime
    description: String
    internalNotes: String
    eventPostingId: String
    eventData: EventData
    createDate: DateTime
    createOrgin: String
    updateDate: DateTime
    updateOrgin: String
    version: Long
}

input EventUpdateInput {
    classificationMarking: String
    ssaPredecessorEventUuid: ID
    eventType: EventType
    eventName: String
    eventStatus: EventStatus
    startDt: DateTime
    endDt: DateTime
    eventDesc: String
    bigBoardFlag: Boolean
    internalNotes: String
    eventPostingId: String
}

input SsaEventCreateInput {
    classificationMarking: String!
    ssaPredecessorEventUuid: ID
    eventType: EventType!
    eventName: String!
    eventStatus: EventStatus!
    startDt: DateTime!
    endDt: DateTime!
    eventDesc: String
    bigBoardFlag: Boolean
    internalNotes: String
    eventPostingId: String
}

enum EventStatus
{
    PLANNED
    PREDICTED
    POSSIBLE
    ACTIVE
    CONFIRMED
    CANCELLED
    CLOSED
    ADVISORY
    VERIFIED
}

enum EventType
{
    BREAKUP,
    Multipayload,
    CONJUNCTION,
    DEORBIT,
    DOCK,
    EMI,
    LAUNCH,
    MANEUVER,
    NUDET,
    OTHER,
    PROXIMITY,
    REENTRY,
    RENDEZVOUS,
    SEPARATION,
    UNDOCK
}