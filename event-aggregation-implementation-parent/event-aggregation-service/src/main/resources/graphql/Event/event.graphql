type MPEServiceQuery {
    eventById(id: String!): Event
    eventTypeSummariesByTimePeriod(timePeriod: TimePeriod!, pageRequest: PageInfo): EventTypeSummaryResults
    eventsByTimePeriodAndType(type: EventType!, timePeriod: TimePeriod!, pageRequest: PageInfo):[Event]
    eventData(eventDataUuid: String): EventData
    deleteEvent(eventUuid: String!): Eventd
}

type TypeQuery {
    getEventTypes: [EventType]
}

type MPEServiceMutation {
    closeEvent(id: String, endDate: DateTime): Event
    deleteEvent(id: String): Event
    updateEventStatus(id: String, eventStatus: EventStatus!): Event
    createEvent(eventData: CreateEvent): Event
}

type EventTypeSummaryResults {
    id: String
    type: String
    planned: Int
    active: Int
    typename: String
}

type Launch {
    id: String
    launchTimestamp: DateTime
    launchSite: String
    launchCountry: String
    typeName: String
}

type Event {
    eventUuid: String
    classificationMarking: String
    predecessorEventUuid: String
    eventType: EventType
    eventName: String
    eventStatus: EventStatus
    eventState: EventState
    startDate: DateTime
    endDate: DateTime
    eventDesc: String
    internalNotes: String
    eventPostingId: String
    eventData: [EventData!]
    createDate: DateTime
    createOrigin: String
    updateDate: DateTime
    updateOrigin: String
    version: Long
}

type EventData {
    eventDataUuid: String
    classificationMarking: String
    eventUuid: String
    name: String
    uri: String
    type: String
    supplementalData: String
    createDate: DateTime
    createOrigin: String
    updateDate: DateTime
    updateOrigin: String
    version: Long
}


input EventDataInput {
    eventDataUuid: String
    classificationMarking: String
    eventUuid: String
    name: String
    uri: String
    type: String
    supplementalData: String
    createDate: DateTime
    createOrigin: String
    updateDate: DateTime
    updateOrigin: String
    version: Long
}

input CreateEvent {
    eventUuid: ID!
    classificationMarking: String!
    ssaPredecessorEventUuid: ID
    eventType: EventType!
    eventName: String!
    eventStatus: EventStatus!
    startDate: DateTime
    endDate: DateTime
    description: String
    internalNotes: String
    eventPostingId: String
    eventData: EventDataInput
    createDate: DateTime
    createOrigin: String
    updateDate: DateTime
    updateOrigin: String
    version: Long
}

